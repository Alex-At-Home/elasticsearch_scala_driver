package org.elastic.elasticsearch.scala.driver.common

import org.elastic.elasticsearch.scala.driver.common.SearchModifiers.MultiSearchDeclaration
import org.elastic.elasticsearch.scala.driver.utils.BulkUtils
import org.elastic.rest.scala.driver.RestBase.BaseDriverOp
import org.elastic.rest.scala.driver.RestBaseImplicits.CustomTypedToString
import org.elastic.rest.scala.driver.utils.NoJsonHelpers.{SimpleObjectDescription => obj}
import org.elastic.rest.scala.driver.utils.NoJsonHelpers.SimpleObjectDescription

/** Data model types used by the search resources
  */
trait DataModelSearch {

  /** The base term that all non-scrolling `_search` queries return */
  trait SearchResults

  /** A case class representing the query to execute
    * [[https://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-request-body.html Docs]]
    *
    * TODO: lots of other terms to go into the query
    *
    * @param query The query term or terms that comprise the query
    * @param timeout A search timeout, bounding the search request to be executed within the specified time value and
    *                bail with the hits accumulated up to that point when expired. Defaults to no timeout.
    * @param from To retrieve hits from a certain offset. Defaults to 0.
    * @param size The number of hits to return. Defaults to 10. If you do not care about getting some hits back
    *             but only about the number of matches and/or aggregations, setting the value to 0 will help
    *             performance.
    * @param terminate_after The maximum number of documents to collect for each shard, upon reaching which the query
    *                        execution will terminate early. If set, the response will have a boolean field
    *                        terminated_early to indicate whether the query execution has actually terminated_early.
    *                        Defaults to no terminate_after.
    */
  case class QueryBody
    (query: QueryElement,
     timeout: Option[String] = None,
     from: Integer = 0,
     size: Integer = 10,
     terminate_after: Option[Integer] = None)

  /** The base trait that all query elements must inherit */
  trait QueryElement

  /////////////////////////////////////////////////////////////////////////////

  //TODO use SimpleObjectDescription DSL

  /** A query term to retrieve all documents in the specified index/indicies (optionally with specified types)
    * @param boost The optional boost to apply to the scoring
    */
  case class MatchAllQuery(boost: Option[Double] = None) extends CustomTypedToString with QueryElement {
    @SimpleObjectDescription("obj",
      obj.SimpleObject("match_all")(
        obj.Field("boost")
      )
    )
    override def fromTyped: String = obj.AutoGenerated
  }

  /** TODO docs
    *
    * @param field
    * @param value
    * @param boost
    */
  case class TermQuery
    (field: String, value: String, boost: Option[Double] = None) extends CustomTypedToString with QueryElement {
    @SimpleObjectDescription("obj",
      obj.SimpleObject("term")(
        obj.KeyValue("field", "value")(obj.Field("boost"))
      )
    )
    override def fromTyped: String = obj.AutoGenerated
    //TODO
//    {
//      val boostAndValueTerm = boost.map(b =>
//          s"""{
//             "value": "$value",
//             "boost": $b
//          }"""
//        )
//        .getOrElse(
//          s""" "$value"  """
//        )
//
//      s"""{
//        "term": { "$field": $boostAndValueTerm }
//      }"""
//    }
  }

  //TODO terms query

  //TODO range query

  //TODO prefix query

  /** TODO docs
    * [[https://www.elastic.co/guide/en/elasticsearch/reference/2.3/query-dsl-ids-query.html Docs]]
    * @param values
    * @param `type`
    */
  case class IdsQuery(values: Seq[String], `type`: Seq[String] = Seq.empty)
    extends CustomTypedToString with QueryElement
  {
    @SimpleObjectDescription("obj",
      obj.SimpleObject("ids")(
        obj.MultiTypeField("`type`"),
        obj.Field("values")
      )
    )
    override def fromTyped: String = obj.AutoGenerated
  }

  //TODO compound / composite buidlers

  /** TODO docs
    * [[https://www.elastic.co/guide/en/elasticsearch/reference/2.3/query-dsl-bool-query.html Docs]]
    * @param must
    * @param must_not
    * @param should
    * @param filter
    * @param minimum_should_match
    * @param boost
    */
  case class BoolQuery
    (must: Seq[QueryElement] = Seq.empty, must_not: Seq[QueryElement] = Seq.empty, should: Seq[QueryElement] = Seq.empty,
     filter: Seq[QueryElement] = Seq.empty, minimum_should_match: Option[Integer] = None, boost: Option[Double] = None)
  //TODO extends CustomTypedToString with QueryElement
  {

  }

  //TODO constant score .. https://www.elastic.co/guide/en/elasticsearch/reference/2.3/query-dsl-constant-score-query.html
  // embedded: constant_score: filter, boost

  //TODO has parent

  //TODO has child

  /////////////////////////////////////////////////////////////////////////////

  /** List of search operations to apply as part of the multi search operation
    *
    * @param ops The list of ES operations
    */
  case class MultiSearchOps(ops: List[BaseDriverOp with MultiSearchDeclaration]) extends CustomTypedToString {
    override def fromTyped: String = BulkUtils.buildBulkSearchOps(ops)
  }
}
object DataModelSearch extends DataModelSearch